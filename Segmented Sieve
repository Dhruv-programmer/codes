 vector<int> sieve(int n)
{ // returns all primes less than n
    vector<int> a;
    if (!n)
        return a;
    vector<bool> v(n + 1, 1);
    v[0] = v[1] = 0;
    for (int i = 2; i * i < n; i++)
    {
        if (!v[i])
            continue;
        for (int j = i * i; j < n; j += i)
            v[j] = 0;
    }
    for (int i = 2; i < n; i++)
    {
        if (v[i])
            a.push_back(i);
    }
    return a;
}
int countPrimes(int n)
{
    int a = floor(sqrt(n)) + 1;
    vector<int> v = sieve(a);
    vector<int> res = v;
    int low = a;
    int high = low + a;

    while (low < n)
    {
        if (high > n)
            high = n;

        bool *z = new bool[high - low + 1];
        for(int i = 0;i<(high-low+1);i++)
            z[i] = 1;
        for (auto i : v)
        {
            int start = (low / i) * i;
            if (low > start)
                start += i;

            for (int j = start; j < high; j += i)
                z[j - low] = 0;
        }

        for (int i = 0; i < (high - low ); i++)
        {
            if (z[i])
                res.push_back(i + low);
        }

        low += a;
        delete[] z;
        high = low + a;
    }
    return res.size();
}
