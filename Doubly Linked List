#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class node
{
public:
    int data;
    node *prev;
    node *next;
    node()
    {
        next = NULL;
        prev = NULL;
    }
    node(int data)
    {
        this->data = data;
        prev = NULL;
        next = NULL;
    }
};
void insertAtFront(node *&head, int data)
{
    node *a = new node(data);
    a->next = head;
    if (head != NULL)
        head->prev = a;
    head = a;
}
void insertAtEnd(node *&head, int data)
{
    node *a = new node(data);
    if (head == NULL)
    {
        head = a;
        return;
    }
    node *t = head;
    while (t->next != NULL)
        t = t->next;
    a->prev = t;
    t->next = a;
}
void insertAtPos(node *&head, int pos, int data)
{
    pos--;
    if (pos == 0)
        insertAtFront(head, data);
    else
    {
        node *t = head;
        while (pos > 1)
        {
            if (t == NULL)
            {
                cout << "Invalid\n";
                return;
            }
            t = t->next;
            pos--;
        }
        if (t->next == NULL)
            insertAtEnd(head, data);
        else
        {
            node *a = new node(data);
            a->prev = t;
            a->next = t->next;
            t->next->prev = a;
            t->next = a;
        }
    }
}
void deleteKey(node *&head, int key)
{
    node *current = head;
    // if first element
    if (head == NULL)
        return;
    if (current->data == key)
    {
        head = current->next;
        current->next = NULL;
        if (head != NULL)
            head->prev = NULL;
        delete current;
    }
    else
    {
        while (current->data != key)
        {
            if (current->next == NULL)
                return;
            current = current->next;
        }
        // last element
        if (current->next == NULL)
        {
            current->prev->next = NULL;
            current->prev = NULL;
            delete current;
        }
        // mid element
        else
        {
            current->prev->next = current->next;
            current->next->prev = current->prev;
            current->next = NULL;
            current->prev = NULL;
            delete current;
        }
    }
}
void print(node *&head)
{
    if (head == NULL)
        return;
    node *t = head;
    while (t != NULL)
    {
        cout << t->data << " ";
        t = t->next;
    }
    cout << endl;
}
int main()
{
    node *head = NULL;
    insertAtFront(head, 4);
    print(head);
    insertAtEnd(head, 5);
    print(head);
    insertAtPos(head, 3, 43);
    insertAtPos(head, 3, 23);
    insertAtPos(head, 3, 13);
    print(head);
    deleteKey(head, 13);
    deleteKey(head, 43);
    print(head);

    return 0;
}
