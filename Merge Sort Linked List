void insertAfter(ListNode *tail, ListNode *i)
{
    i->next = tail->next;
    tail->next = i;
}
ListNode *merge(ListNode *h1, ListNode *h2)
{
    if (!h1)
        return h2;
    if (!h2)
        return h1;
    if (h1->val > h2->val)
        swap(h1, h2);
    if (h1->next == NULL)
    {
        h1->next = h2;
        return h1;
    }
    ListNode *cur = h1, *next = h1->next, *i = h2;
    while (next && i)
    {
        if (i->val <= next->val && i->val >= cur->val)
        {
            ListNode *n2 = i->next;
            insertAfter(cur, i);
            i = n2;
            cur = cur->next;
        }
        else
        {
            cur = cur->next;
            next = next->next;
        }
    }
    while (i)
    {
        ListNode *n2 = i->next;
        insertAfter(cur, i);
        i = n2;
        cur = cur->next;
    }
    return h1;
}
ListNode *giveMid(ListNode *head)
{
    if (head == NULL || head->next == NULL)
        return head;
    ListNode *slow = head, *fast = head->next;
    while (fast && fast->next)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    return slow;
}
ListNode *mergeSort(ListNode *head)
{
    // base case (stop dividing if only one node left)
    if (head == NULL || head->next == NULL)
        return head;

    // divide the linked list into two parts
    ListNode *mid = giveMid(head);
    ListNode *firstPart = head, *secondPart = mid->next;
    mid->next = NULL;

    // sort these two parts
    ListNode *h1 = mergeSort(firstPart);
    ListNode *h2 = mergeSort(secondPart);

    // now merge these two sorted parts
    return merge(h1, h2);
}
